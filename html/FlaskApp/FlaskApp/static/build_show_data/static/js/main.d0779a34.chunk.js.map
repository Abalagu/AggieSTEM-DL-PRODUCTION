{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["renderStrategySet","linable","text","colorTags","tags","map","tag","color","length","key","toUpperCase","inviteAndDelete","record","style","marginRight","name","App","props","state","userName","datasetName","columns","undefined","data","jsonData","columnsD","column","render","renderStrategy","this","setState","console","log","fetch","method","mode","dataType","then","res","json","username","type","handleTable","catch","err","className","id","href","dataSource","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2SAIMA,G,OAAoB,CACxBC,QAAS,SAAAC,GAAI,OAAI,2BAAIA,IACrBC,UAAW,SAAAC,GAAI,OACb,8BACGA,EAAKC,KAAI,SAAAC,GACR,IAAIC,EAAQD,EAAIE,OAAS,EAAI,WAAa,QAI1C,MAHY,UAARF,IACFC,EAAQ,WAGR,kBAAC,IAAD,CAAKA,MAAOA,EAAOE,IAAKH,GACrBA,EAAII,oBAMfC,gBAAiB,SAACT,EAAMU,GAAP,OACf,8BACE,uBAAGC,MAAO,CAAEC,YAAa,KAAzB,UAAuCF,EAAOG,MAC9C,yCAKAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,YAAa,GACbC,aAASC,EACTC,UAAMD,GANS,E,wDAUPE,GACV,GAAIA,EAASH,SAAWG,EAASD,KAAM,CACrC,IADqC,EACjCE,EAAWD,EAASH,QADa,cAElBI,GAFkB,IAErC,2BAA6B,CAAC,IAArBC,EAAoB,QAC3BA,EAAOC,OAAS3B,EAAkB0B,EAAOE,iBAHN,8BAKrCC,KAAKC,SAAS,CAAET,QAASI,EAAUF,KAAMC,EAASD,U,0CAIjC,IAAD,OAClBQ,QAAQC,IAAI,6BACZC,MAAM,wCAAyC,CAC7CC,OAAQ,MACRC,KAAM,UACNC,SAAU,SACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAC,GAC9BP,QAAQC,IAAIM,GACZ,EAAKR,SAAS,CAAEX,SAAUmB,EAAIE,SAAUpB,YAAakB,EAAIlB,cACxC,UAAbkB,EAAIG,MACN,EAAKC,YAAYJ,MAElBK,OAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,Q,+BAI5B,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SAASC,GAAG,WACzB,yBAAKD,UAAU,iBACb,uBAAGA,UAAU,eAAeE,KAAK,aAAjC,cACA,yBAAKF,UAAU,mBACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,WAAWC,GAAG,QAAQ/B,KAAK,SACvC,uBAAG8B,UAAU,WAAWE,KAAK,gBAAgBlB,KAAKX,MAAMC,WAE1D,wBAAI0B,UAAU,WAAWC,GAAG,SAAS/B,KAAK,UACxC,uBAAG8B,UAAU,WAAWE,KAAK,UAA7B,eAOV,yBAAKF,UAAU,YACb,wBAAIA,UAAU,eAAd,oBAA8ChB,KAAKX,MAAME,aACzD,kBAAC,IAAD,CAAOC,QAASQ,KAAKX,MAAMG,QAAS2B,WAAYnB,KAAKX,MAAMK,QAG7D,4BAAQsB,UAAU,gBAChB,yBAAKA,UAAU,aACb,uBAAGA,UAAU,6BAAb,wC,GA9DMI,IAAMC,WCjBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS7B,OACP,kBAAC,IAAM8B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.d0779a34.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, Tag } from 'antd';\nimport './App.css';\n\nconst renderStrategySet = {\n  linable: text => <a>{text}</a>,\n  colorTags: tags => (\n    <span>\n      {tags.map(tag => {\n        let color = tag.length > 5 ? 'geekblue' : 'green';\n        if (tag === 'loser') {\n          color = 'volcano';\n        }\n        return (\n          <Tag color={color} key={tag}>\n            {tag.toUpperCase()}\n          </Tag>\n        );\n      })}\n    </span>\n  ),\n  inviteAndDelete: (text, record) => (\n    <span>\n      <a style={{ marginRight: 16 }}>Invite {record.name}</a>\n      <a>Delete</a>\n    </span>\n  )\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: '',\n      datasetName: '',\n      columns: undefined,\n      data: undefined\n    }\n  }\n\n  handleTable(jsonData) {\n    if (jsonData.columns && jsonData.data) {\n      let columnsD = jsonData.columns;\n      for (let column of columnsD) {\n        column.render = renderStrategySet[column.renderStrategy];\n      }\n      this.setState({ columns: columnsD, data: jsonData.data });\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"fetching python localhost\");\n    fetch('http://localhost:8080/show_data_fetch', {\n      method: 'GET',\n      mode: 'no-cors',\n      dataType: 'json'\n    }).then(res => res.json()).then(res => {\n      console.log(res)\n      this.setState({ userName: res.username, datasetName: res.datasetName });\n      if (res.type === 'table') {\n        this.handleTable(res);\n      }\n    }).catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar\" id=\"mainNav\">\n          <div className=\"nav-container\">\n            <a className=\"navbar-brand\" href=\"dashboard\">Aggie STEM</a>\n            <div className=\"navbar-collapse\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\" id=\"login\" name=\"login\">\n                  <a className=\"nav-link\" href=\"user_profile\">{this.state.userName}</a>\n                </li>\n                <li className=\"nav-item\" id=\"logout\" name=\"logout\">\n                  <a className=\"nav-link\" href=\"logout\">Logout</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"mainBody\">\n          <h1 className=\"datasetName\">Current Dataset: {this.state.datasetName}</h1>\n          <Table columns={this.state.columns} dataSource={this.state.data} />\n        </div>\n\n        <footer className=\"py-5 bg-dark\">\n          <div className=\"container\">\n            <p className=\"m-4 text-center text-dark\">Copyright &copy; AggieSTEM 2019</p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}